
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a50  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bf8  08000bf8  00010bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c04  08000c04  00010c0c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c04  08000c04  00010c0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c04  08000c0c  00010c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c04  08000c04  00010c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c0c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c0c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c63  00000000  00000000  00010c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000058f  00000000  00000000  0001289f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00012e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000128  00000000  00000000  00012f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002134  00000000  00000000  000130b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001adc  00000000  00000000  000151ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000955a  00000000  00000000  00016cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e8  00000000  00000000  00020278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000be0 	.word	0x08000be0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000be0 	.word	0x08000be0

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:
 * PB12-->NSS
 * All this is avaialable for the pin in the alternate functionality mode 5
 */

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0

	GPIO_Handle_t	SPIPins;
	SPIPins.pGPIOx=GPIOB;
 80001fe:	4b11      	ldr	r3, [pc, #68]	; (8000244 <SPI2_GPIOInits+0x4c>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode =5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//For Pin number 12 NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_12;
 8000216:	230c      	movs	r3, #12
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9bf 	bl	80005a0 <GPIO_Init>

	//For pin number 13 SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f9b9 	bl	80005a0 <GPIO_Init>
	//For pin number 14 MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	//For Pin number 15 MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9b3 	bl	80005a0 <GPIO_Init>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <SPI2_Inits>:


void SPI2_Inits(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
	SPI_Handle_t	SPI2Handle;
	SPI2Handle.pSPIx=SPI2;
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <SPI2_Inits+0x38>)
 8000250:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig=SPI_BUS_CONFIG_FD;
 8000252:	2301      	movs	r3, #1
 8000254:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 8000256:	2301      	movs	r3, #1
 8000258:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed=SPI_SCLK_SPEED_DIV8; //Generate the SCLK of 2MHz
 800025a:	2302      	movs	r3, #2
 800025c:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF=SPI_DFF_8BITS;
 800025e:	2300      	movs	r3, #0
 8000260:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL=SPI_CPOL_LOW;
 8000262:	2300      	movs	r3, #0
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA=SPI_CPHA_LOW;
 8000266:	2300      	movs	r3, #0
 8000268:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM=SPI_SSM_DI;  //Hardware Slavemgmt available for NSS PIN
 800026a:	2300      	movs	r3, #0
 800026c:	72bb      	strb	r3, [r7, #10]
	SPI_Init(&SPI2Handle);
 800026e:	463b      	mov	r3, r7
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fbcc 	bl	8000a0e <SPI_Init>


}
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40003800 	.word	0x40003800

08000284 <GPIO_ButtonInit>:


void GPIO_ButtonInit()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
		GPIO_Handle_t GpioBtn;
	//Configuration params for the button
		GpioBtn.pGPIOx=GPIOA;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <GPIO_ButtonInit+0x2c>)
 800028c:	607b      	str	r3, [r7, #4]
		GpioBtn.GPIO_PinConfig.GPIO_PinNumber=GPIO_PIN_NO_0;
 800028e:	2300      	movs	r3, #0
 8000290:	723b      	strb	r3, [r7, #8]
		GpioBtn.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_IN;
 8000292:	2300      	movs	r3, #0
 8000294:	727b      	strb	r3, [r7, #9]
		GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	72fb      	strb	r3, [r7, #11]
		GpioBtn.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_HIGH;
 800029a:	2303      	movs	r3, #3
 800029c:	72bb      	strb	r3, [r7, #10]
		GPIO_Init(&GpioBtn);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f97d 	bl	80005a0 <GPIO_Init>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40020000 	.word	0x40020000

080002b4 <delay>:

void delay(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2;i++);
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	e002      	b.n	80002c6 <delay+0x12>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <delay+0x28>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d9f8      	bls.n	80002c0 <delay+0xc>
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	0003d08f 	.word	0x0003d08f

080002e0 <main>:
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	char userDefine[]="Hello World";
 80002e6:	4a20      	ldr	r2, [pc, #128]	; (8000368 <main+0x88>)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIO_ButtonInit();
 80002f0:	f7ff ffc8 	bl	8000284 <GPIO_ButtonInit>

	//The function which is able to initialise the pins as the SPI pins
	SPI2_GPIOInits();
 80002f4:	f7ff ff80 	bl	80001f8 <SPI2_GPIOInits>

	//Peripheral configuration which could be done by configuring the SPI handle structure
	SPI2_Inits();
 80002f8:	f7ff ffa6 	bl	8000248 <SPI2_Inits>

	//Configuration of the SSOE bit in case where the SSI
	SPI_SSOEConfig(SPI2, ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	481b      	ldr	r0, [pc, #108]	; (800036c <main+0x8c>)
 8000300:	f000 fb66 	bl	80009d0 <SPI_SSOEConfig>

	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000304:	bf00      	nop
 8000306:	2100      	movs	r1, #0
 8000308:	4819      	ldr	r0, [pc, #100]	; (8000370 <main+0x90>)
 800030a:	f000 faef 	bl	80008ec <GPIO_ReadFromInputPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f8      	beq.n	8000306 <main+0x26>

		delay();
 8000314:	f7ff ffce 	bl	80002b4 <delay>
		//SPI peripheral needs to be enabled before calling the send data function
		SPI_PeripheralControl(SPI2, ENABLE);
 8000318:	2101      	movs	r1, #1
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <main+0x8c>)
 800031c:	f000 fc1d 	bl	8000b5a <SPI_PeripheralControl>

		//First send the number of byte information we are going to send
		uint8_t datalength=strlen(userDefine);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff60 	bl	80001e8 <strlen>
 8000328:	4603      	mov	r3, r0
 800032a:	b2db      	uxtb	r3, r3
 800032c:	70fb      	strb	r3, [r7, #3]

		//Sending the SPI datalength to inform the number of byter for transmission.
		SPI_SendData(SPI2, &datalength,1);
 800032e:	1cfb      	adds	r3, r7, #3
 8000330:	2201      	movs	r2, #1
 8000332:	4619      	mov	r1, r3
 8000334:	480d      	ldr	r0, [pc, #52]	; (800036c <main+0x8c>)
 8000336:	f000 fbd9 	bl	8000aec <SPI_SendData>

		//The API helps us to send data
		SPI_SendData(SPI2, (uint8_t*)userDefine, strlen(userDefine));
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff53 	bl	80001e8 <strlen>
 8000342:	4602      	mov	r2, r0
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <main+0x8c>)
 800034a:	f000 fbcf 	bl	8000aec <SPI_SendData>

		//Confirming SPI is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 800034e:	bf00      	nop
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <main+0x8c>)
 8000354:	f000 fbb6 	bl	8000ac4 <SPI_GetFlagStatus>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f8      	bne.n	8000350 <main+0x70>

		//Diabling the Spi forcefully
		SPI_PeripheralControl(SPI2, DISABLE);
 800035e:	2100      	movs	r1, #0
 8000360:	4802      	ldr	r0, [pc, #8]	; (800036c <main+0x8c>)
 8000362:	f000 fbfa 	bl	8000b5a <SPI_PeripheralControl>
	{
 8000366:	e7cd      	b.n	8000304 <main+0x24>
 8000368:	08000bf8 	.word	0x08000bf8
 800036c:	40003800 	.word	0x40003800
 8000370:	40020000 	.word	0x40020000

08000374 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000374:	480d      	ldr	r0, [pc, #52]	; (80003ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000376:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000378:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800037e:	490d      	ldr	r1, [pc, #52]	; (80003b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <LoopForever+0xe>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000394:	4c0a      	ldr	r4, [pc, #40]	; (80003c0 <LoopForever+0x16>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a2:	f000 fbf9 	bl	8000b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a6:	f7ff ff9b 	bl	80002e0 <main>

080003aa <LoopForever>:

LoopForever:
    b LoopForever
 80003aa:	e7fe      	b.n	80003aa <LoopForever>
  ldr   r0, =_estack
 80003ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b8:	08000c0c 	.word	0x08000c0c
  ldr r2, =_sbss
 80003bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c0:	2000001c 	.word	0x2000001c

080003c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c4:	e7fe      	b.n	80003c4 <ADC_IRQHandler>
	...

080003c8 <GPIO_PeriClockControl>:
 * @return type		--return type void
 *
 * @Note 			--Please donot enable the power for the GPIO ports which are not in use as this may increase the utilisation
 ***********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	70fb      	strb	r3, [r7, #3]

	if(EnorDi==ENABLE)
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d162      	bne.n	80004a0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx==GPIOA)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a66      	ldr	r2, [pc, #408]	; (8000578 <GPIO_PeriClockControl+0x1b0>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003e2:	4b66      	ldr	r3, [pc, #408]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a65      	ldr	r2, [pc, #404]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 80003ee:	e0bc      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx==GPIOB)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a63      	ldr	r2, [pc, #396]	; (8000580 <GPIO_PeriClockControl+0x1b8>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f8:	4b60      	ldr	r3, [pc, #384]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a5f      	ldr	r2, [pc, #380]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80003fe:	f043 0302 	orr.w	r3, r3, #2
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e0b1      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOC)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a5e      	ldr	r2, [pc, #376]	; (8000584 <GPIO_PeriClockControl+0x1bc>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800040e:	4b5b      	ldr	r3, [pc, #364]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a5a      	ldr	r2, [pc, #360]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e0a6      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOD)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a5a      	ldr	r2, [pc, #360]	; (8000588 <GPIO_PeriClockControl+0x1c0>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000424:	4b55      	ldr	r3, [pc, #340]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a54      	ldr	r2, [pc, #336]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e09b      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOE)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a55      	ldr	r2, [pc, #340]	; (800058c <GPIO_PeriClockControl+0x1c4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800043a:	4b50      	ldr	r3, [pc, #320]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a4f      	ldr	r2, [pc, #316]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000440:	f043 0310 	orr.w	r3, r3, #16
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e090      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a51      	ldr	r2, [pc, #324]	; (8000590 <GPIO_PeriClockControl+0x1c8>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000450:	4b4a      	ldr	r3, [pc, #296]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a49      	ldr	r2, [pc, #292]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e085      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOG)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a4c      	ldr	r2, [pc, #304]	; (8000594 <GPIO_PeriClockControl+0x1cc>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000466:	4b45      	ldr	r3, [pc, #276]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a44      	ldr	r2, [pc, #272]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800046c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e07a      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a48      	ldr	r2, [pc, #288]	; (8000598 <GPIO_PeriClockControl+0x1d0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a3e      	ldr	r2, [pc, #248]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e06f      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx==GPIOI)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a43      	ldr	r2, [pc, #268]	; (800059c <GPIO_PeriClockControl+0x1d4>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d16b      	bne.n	800056a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000492:	4b3a      	ldr	r3, [pc, #232]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a39      	ldr	r2, [pc, #228]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e064      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
	else if (EnorDi==DISABLE)
 80004a0:	78fb      	ldrb	r3, [r7, #3]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d161      	bne.n	800056a <GPIO_PeriClockControl+0x1a2>
		if(pGPIOx==GPIOA)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a33      	ldr	r2, [pc, #204]	; (8000578 <GPIO_PeriClockControl+0x1b0>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0xf4>
			GPIOA_PCLK_DI();
 80004ae:	4b33      	ldr	r3, [pc, #204]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a32      	ldr	r2, [pc, #200]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004b4:	f023 0301 	bic.w	r3, r3, #1
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e056      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx==GPIOB)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a30      	ldr	r2, [pc, #192]	; (8000580 <GPIO_PeriClockControl+0x1b8>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x10a>
			GPIOB_PCLK_DI();
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a2c      	ldr	r2, [pc, #176]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004ca:	f023 0302 	bic.w	r3, r3, #2
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	e04b      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOC)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a2b      	ldr	r2, [pc, #172]	; (8000584 <GPIO_PeriClockControl+0x1bc>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x120>
			GPIOC_PCLK_DI();
 80004da:	4b28      	ldr	r3, [pc, #160]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a27      	ldr	r2, [pc, #156]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004e0:	f023 0304 	bic.w	r3, r3, #4
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e6:	e040      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOD)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a27      	ldr	r2, [pc, #156]	; (8000588 <GPIO_PeriClockControl+0x1c0>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x136>
			GPIOD_PCLK_DI();
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 80004f6:	f023 0308 	bic.w	r3, r3, #8
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fc:	e035      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOE)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a22      	ldr	r2, [pc, #136]	; (800058c <GPIO_PeriClockControl+0x1c4>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0x14c>
			GPIOE_PCLK_DI();
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800050c:	f023 0310 	bic.w	r3, r3, #16
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000512:	e02a      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOF)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <GPIO_PeriClockControl+0x1c8>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_PeriClockControl+0x162>
			GPIOF_PCLK_DI();
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000522:	f023 0320 	bic.w	r3, r3, #32
 8000526:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000528:	e01f      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOG)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a19      	ldr	r2, [pc, #100]	; (8000594 <GPIO_PeriClockControl+0x1cc>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClockControl+0x178>
			GPIOG_PCLK_DI();
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053e:	e014      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if(pGPIOx==GPIOH)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a15      	ldr	r2, [pc, #84]	; (8000598 <GPIO_PeriClockControl+0x1d0>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <GPIO_PeriClockControl+0x18e>
			GPIOH_PCLK_DI();
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 800054e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000552:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000554:	e009      	b.n	800056a <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx==GPIOI)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <GPIO_PeriClockControl+0x1d4>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d105      	bne.n	800056a <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_DI();
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a06      	ldr	r2, [pc, #24]	; (800057c <GPIO_PeriClockControl+0x1b4>)
 8000564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40020000 	.word	0x40020000
 800057c:	40023800 	.word	0x40023800
 8000580:	40020400 	.word	0x40020400
 8000584:	40020800 	.word	0x40020800
 8000588:	40020c00 	.word	0x40020c00
 800058c:	40021000 	.word	0x40021000
 8000590:	40021400 	.word	0x40021400
 8000594:	40021800 	.word	0x40021800
 8000598:	40021c00 	.word	0x40021c00
 800059c:	40022000 	.word	0x40022000

080005a0 <GPIO_Init>:
 * @return type		--return type of the function and how it should be handled
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2101      	movs	r1, #1
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff0a 	bl	80003c8 <GPIO_PeriClockControl>
	uint32_t temp=0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

	//Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d81f      	bhi.n	8000600 <GPIO_Init+0x60>
	{
		//Configuration of the non interrupt mode of the GPIO pins
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	461a      	mov	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER	&=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	4619      	mov	r1, r3
 80005de:	2303      	movs	r3, #3
 80005e0:	408b      	lsls	r3, r1
 80005e2:	43db      	mvns	r3, r3
 80005e4:	4619      	mov	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	400a      	ands	r2, r1
 80005ec:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER 	|= temp;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	6819      	ldr	r1, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	e0d1      	b.n	80007a4 <GPIO_Init+0x204>
	}
	else
	{
		//Configuration of the interrupt mode of the GPIO pins
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d117      	bne.n	8000638 <GPIO_Init+0x98>
		{
			//1.Configure the falling edge selection register(FTSR)
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <GPIO_Init+0x194>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7912      	ldrb	r2, [r2, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	2201      	movs	r2, #1
 8000614:	408a      	lsls	r2, r1
 8000616:	4611      	mov	r1, r2
 8000618:	4a46      	ldr	r2, [pc, #280]	; (8000734 <GPIO_Init+0x194>)
 800061a:	430b      	orrs	r3, r1
 800061c:	60d3      	str	r3, [r2, #12]
			//Clearing the RTSR bits so that if previous configured could be erased
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	4b45      	ldr	r3, [pc, #276]	; (8000734 <GPIO_Init+0x194>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	43d2      	mvns	r2, r2
 800062e:	4611      	mov	r1, r2
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <GPIO_Init+0x194>)
 8000632:	400b      	ands	r3, r1
 8000634:	6093      	str	r3, [r2, #8]
 8000636:	e035      	b.n	80006a4 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b05      	cmp	r3, #5
 800063e:	d117      	bne.n	8000670 <GPIO_Init+0xd0>
		{
			//1.Configure the Rise edge selection register (RTSR)
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <GPIO_Init+0x194>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	7912      	ldrb	r2, [r2, #4]
 8000648:	4611      	mov	r1, r2
 800064a:	2201      	movs	r2, #1
 800064c:	408a      	lsls	r2, r1
 800064e:	4611      	mov	r1, r2
 8000650:	4a38      	ldr	r2, [pc, #224]	; (8000734 <GPIO_Init+0x194>)
 8000652:	430b      	orrs	r3, r1
 8000654:	6093      	str	r3, [r2, #8]
			//Clearing the FTSR bits so that if configured previously could be cleared here
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <GPIO_Init+0x194>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7912      	ldrb	r2, [r2, #4]
 800065e:	4611      	mov	r1, r2
 8000660:	2201      	movs	r2, #1
 8000662:	408a      	lsls	r2, r1
 8000664:	43d2      	mvns	r2, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a32      	ldr	r2, [pc, #200]	; (8000734 <GPIO_Init+0x194>)
 800066a:	400b      	ands	r3, r1
 800066c:	60d3      	str	r3, [r2, #12]
 800066e:	e019      	b.n	80006a4 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d115      	bne.n	80006a4 <GPIO_Init+0x104>
		{
			//1.Configure both falling and rising interrupt trigger resgister.
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <GPIO_Init+0x194>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7912      	ldrb	r2, [r2, #4]
 8000680:	4611      	mov	r1, r2
 8000682:	2201      	movs	r2, #1
 8000684:	408a      	lsls	r2, r1
 8000686:	4611      	mov	r1, r2
 8000688:	4a2a      	ldr	r2, [pc, #168]	; (8000734 <GPIO_Init+0x194>)
 800068a:	430b      	orrs	r3, r1
 800068c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <GPIO_Init+0x194>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	4611      	mov	r1, r2
 800069e:	4a25      	ldr	r2, [pc, #148]	; (8000734 <GPIO_Init+0x194>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	6093      	str	r3, [r2, #8]

		}

		//2. Configure the GPIO Port selection  in the SYSCFG_EXTICR register
		uint8_t temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode= GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <GPIO_Init+0x198>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d04d      	beq.n	800075c <GPIO_Init+0x1bc>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1d      	ldr	r2, [pc, #116]	; (800073c <GPIO_Init+0x19c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d032      	beq.n	8000730 <GPIO_Init+0x190>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <GPIO_Init+0x1a0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d02b      	beq.n	800072c <GPIO_Init+0x18c>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <GPIO_Init+0x1a4>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d024      	beq.n	8000728 <GPIO_Init+0x188>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a19      	ldr	r2, [pc, #100]	; (8000748 <GPIO_Init+0x1a8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d01d      	beq.n	8000724 <GPIO_Init+0x184>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a17      	ldr	r2, [pc, #92]	; (800074c <GPIO_Init+0x1ac>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d016      	beq.n	8000720 <GPIO_Init+0x180>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <GPIO_Init+0x1b0>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d00f      	beq.n	800071c <GPIO_Init+0x17c>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <GPIO_Init+0x1b4>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d008      	beq.n	8000718 <GPIO_Init+0x178>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <GPIO_Init+0x1b8>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d101      	bne.n	8000714 <GPIO_Init+0x174>
 8000710:	2308      	movs	r3, #8
 8000712:	e024      	b.n	800075e <GPIO_Init+0x1be>
 8000714:	2300      	movs	r3, #0
 8000716:	e022      	b.n	800075e <GPIO_Init+0x1be>
 8000718:	2307      	movs	r3, #7
 800071a:	e020      	b.n	800075e <GPIO_Init+0x1be>
 800071c:	2306      	movs	r3, #6
 800071e:	e01e      	b.n	800075e <GPIO_Init+0x1be>
 8000720:	2305      	movs	r3, #5
 8000722:	e01c      	b.n	800075e <GPIO_Init+0x1be>
 8000724:	2304      	movs	r3, #4
 8000726:	e01a      	b.n	800075e <GPIO_Init+0x1be>
 8000728:	2303      	movs	r3, #3
 800072a:	e018      	b.n	800075e <GPIO_Init+0x1be>
 800072c:	2302      	movs	r3, #2
 800072e:	e016      	b.n	800075e <GPIO_Init+0x1be>
 8000730:	2301      	movs	r3, #1
 8000732:	e014      	b.n	800075e <GPIO_Init+0x1be>
 8000734:	40013c00 	.word	0x40013c00
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800
 8000754:	40021c00 	.word	0x40021c00
 8000758:	40022000 	.word	0x40022000
 800075c:	2300      	movs	r3, #0
 800075e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000760:	4b5f      	ldr	r3, [pc, #380]	; (80008e0 <GPIO_Init+0x340>)
 8000762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000764:	4a5e      	ldr	r2, [pc, #376]	; (80008e0 <GPIO_Init+0x340>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portCode<< (temp2*4);
 800076c:	4a5d      	ldr	r2, [pc, #372]	; (80008e4 <GPIO_Init+0x344>)
 800076e:	7cfb      	ldrb	r3, [r7, #19]
 8000770:	3302      	adds	r3, #2
 8000772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000776:	7c79      	ldrb	r1, [r7, #17]
 8000778:	7cbb      	ldrb	r3, [r7, #18]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	4618      	mov	r0, r3
 8000782:	4958      	ldr	r1, [pc, #352]	; (80008e4 <GPIO_Init+0x344>)
 8000784:	7cfb      	ldrb	r3, [r7, #19]
 8000786:	4302      	orrs	r2, r0
 8000788:	3302      	adds	r3, #2
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using the IMR
		EXTI->IMR	|=	1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800078e:	4b56      	ldr	r3, [pc, #344]	; (80008e8 <GPIO_Init+0x348>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	2201      	movs	r2, #1
 800079a:	408a      	lsls	r2, r1
 800079c:	4611      	mov	r1, r2
 800079e:	4a52      	ldr	r2, [pc, #328]	; (80008e8 <GPIO_Init+0x348>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	6013      	str	r3, [r2, #0]


	}

	temp=0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
	//Configure the speed of GPIO pin
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	799b      	ldrb	r3, [r3, #6]
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR		&= 	~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	4619      	mov	r1, r3
 80007c6:	2303      	movs	r3, #3
 80007c8:	408b      	lsls	r3, r1
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	400a      	ands	r2, r1
 80007d4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR		|=	temp;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6899      	ldr	r1, [r3, #8]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	609a      	str	r2, [r3, #8]


	temp=0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
	//Configure the pull up and pull down functionality of the GPIO pin
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	79db      	ldrb	r3, [r3, #7]
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR			&=	~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //CLearing the bit position
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	4619      	mov	r1, r3
 8000808:	2303      	movs	r3, #3
 800080a:	408b      	lsls	r3, r1
 800080c:	43db      	mvns	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	400a      	ands	r2, r1
 8000816:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR			|=	temp;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68d9      	ldr	r1, [r3, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	430a      	orrs	r2, r1
 8000826:	60da      	str	r2, [r3, #12]

	temp=0;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
	//COnfigure the output type of the gpio pin
    temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType<<(1*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7a1b      	ldrb	r3, [r3, #8]
 8000830:	461a      	mov	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER			&=	~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	4619      	mov	r1, r3
 8000848:	2303      	movs	r3, #3
 800084a:	408b      	lsls	r3, r1
 800084c:	43db      	mvns	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	400a      	ands	r2, r1
 8000856:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER			|=	temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6859      	ldr	r1, [r3, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	430a      	orrs	r2, r1
 8000866:	605a      	str	r2, [r3, #4]

    temp=0;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
	//Configure the alternate functionality of the GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	795b      	ldrb	r3, [r3, #5]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d131      	bne.n	80008d8 <GPIO_Init+0x338>
    {
    	//configure the alternate function registers
    	uint8_t temp1, temp2;
    	temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	743b      	strb	r3, [r7, #16]
    	temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	73fb      	strb	r3, [r7, #15]
    	pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF<<(4*temp2));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7c3a      	ldrb	r2, [r7, #16]
 800088c:	3208      	adds	r2, #8
 800088e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	220f      	movs	r2, #15
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	7c3a      	ldrb	r2, [r7, #16]
 80008a6:	4001      	ands	r1, r0
 80008a8:	3208      	adds	r2, #8
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	7c3a      	ldrb	r2, [r7, #16]
 80008b4:	3208      	adds	r2, #8
 80008b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7a5b      	ldrb	r3, [r3, #9]
 80008be:	461a      	mov	r2, r3
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	7c3a      	ldrb	r2, [r7, #16]
 80008d0:	4301      	orrs	r1, r0
 80008d2:	3208      	adds	r2, #8
 80008d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40013800 	.word	0x40013800
 80008e8:	40013c00 	.word	0x40013c00

080008ec <GPIO_ReadFromInputPin>:
 * @return type		--return type of the function and how it should be handled
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR  >> PinNumber) & 0x00000001);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691a      	ldr	r2, [r3, #16]
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]
	return  value;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SPI_PeriClockControl>:
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d120      	bne.n	800096c <SPI_PeriClockControl+0x54>
		{
			if(pSPIx==SPI1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <SPI_PeriClockControl+0xa8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
				SPI3_PCLK_DI();
			}

		}

}
 800093e:	e038      	b.n	80009b2 <SPI_PeriClockControl+0x9a>
			else if (pSPIx==SPI2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SPI_PeriClockControl+0xb0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <SPI_PeriClockControl+0xac>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <SPI_PeriClockControl+0xac>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000954:	e02d      	b.n	80009b2 <SPI_PeriClockControl+0x9a>
			else if(pSPIx==SPI3)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <SPI_PeriClockControl+0xb4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d129      	bne.n	80009b2 <SPI_PeriClockControl+0x9a>
				SPI3_PCLK_EN();
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
}
 800096a:	e022      	b.n	80009b2 <SPI_PeriClockControl+0x9a>
		else if (EnorDi==DISABLE)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11f      	bne.n	80009b2 <SPI_PeriClockControl+0x9a>
			if(pSPIx==SPI1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <SPI_PeriClockControl+0xa8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d106      	bne.n	8000988 <SPI_PeriClockControl+0x70>
				SPI1_PCLK_DI();
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <SPI_PeriClockControl+0xac>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a11      	ldr	r2, [pc, #68]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000986:	e014      	b.n	80009b2 <SPI_PeriClockControl+0x9a>
			else if (pSPIx==SPI2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <SPI_PeriClockControl+0xb0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d106      	bne.n	800099e <SPI_PeriClockControl+0x86>
				SPI2_PCLK_DI();
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <SPI_PeriClockControl+0xac>)
 8000996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800099c:	e009      	b.n	80009b2 <SPI_PeriClockControl+0x9a>
			else if(pSPIx==SPI3)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SPI_PeriClockControl+0xb4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d105      	bne.n	80009b2 <SPI_PeriClockControl+0x9a>
				SPI3_PCLK_DI();
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <SPI_PeriClockControl+0xac>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <SPI_PeriClockControl+0xac>)
 80009ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40013000 	.word	0x40013000
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40003800 	.word	0x40003800
 80009cc:	40003c00 	.word	0x40003c00

080009d0 <SPI_SSOEConfig>:
 * @return type		--return type of the function and how it should be handled
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d106      	bne.n	80009f0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f043 0204 	orr.w	r2, r3, #4
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
	}
	else if(EnorDi==DISABLE)
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 80009ee:	e008      	b.n	8000a02 <SPI_SSOEConfig+0x32>
	else if(EnorDi==DISABLE)
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d105      	bne.n	8000a02 <SPI_SSOEConfig+0x32>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f023 0204 	bic.w	r2, r3, #4
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	605a      	str	r2, [r3, #4]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <SPI_Init>:
 * @return type		--return type of the function and how it should be handled
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b084      	sub	sp, #16
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff7b 	bl	8000918 <SPI_PeriClockControl>
	//Configuration of the CR1 register
	uint32_t tempreg=0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |=pSPIHandle->SPIConfig.SPI_DeviceMode<<SPI_CR1_MSTR;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus configuration
	if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FD)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <SPI_Init+0x38>
	{
		//BIDI Mode should be cleared
		tempreg &= ~(1<<15);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e014      	b.n	8000a70 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HD)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	795b      	ldrb	r3, [r3, #5]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d104      	bne.n	8000a58 <SPI_Init+0x4a>
	{
		//BIDI mode should be equal to 1 and BIDI OE would decide the direction of transfer of the data
		tempreg |= (1<<15);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e00b      	b.n	8000a70 <SPI_Init+0x62>

	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_S_RXONLY)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	795b      	ldrb	r3, [r3, #5]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d107      	bne.n	8000a70 <SPI_Init+0x62>
	{
		//BIDI Mode should be Cleared and the RXonly bit needs to be set
		tempreg &= ~(1<<15);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a66:	60fb      	str	r3, [r7, #12]
		//RXonly bit configuration
		tempreg |=(1<<10);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6e:	60fb      	str	r3, [r7, #12]
	}

	//Configuration of the speed by configuring the baudrate frequency value
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed<<SPI_CR1_BR;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	799b      	ldrb	r3, [r3, #6]
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]

	//Configuration of the Data frame format for the SPI peripheral
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF<<SPI_CR1_DFF;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	79db      	ldrb	r3, [r3, #7]
 8000a82:	02db      	lsls	r3, r3, #11
 8000a84:	461a      	mov	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]

	//Configuration of the CPOL of the SPI
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL<<SPI_CR1_CPOL;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7a1b      	ldrb	r3, [r3, #8]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	461a      	mov	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]

	//Configuration of the CPHA of the SPI
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA<<SPI_CR1_CPHA;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7a5b      	ldrb	r3, [r3, #9]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]

	//Configuration of the SSM  bit for software select management.
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM<<SPI_CR1_SSM;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7a9b      	ldrb	r3, [r3, #10]
 8000aaa:	025b      	lsls	r3, r3, #9
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]


	//Using all the configurations catched above in the CR1 Register to configure the SPI
	pSPIHandle->pSPIx->CR1 =tempreg;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SPI_GetFlagStatus>:
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000ade:	2300      	movs	r3, #0

}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SPI_SendData>:
 * @return type		--return type of the function and how it should be handled
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	while(len>0)
 8000af8:	e027      	b.n	8000b4a <SPI_SendData+0x5e>
	{
		//Wait until TXE bit is set below statement hangs until txe ==1
		//one way ->while(!(pSPIx->SR &(1<<1)));
		//2nd way -> Implementing a function which gives us the status of the flag
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG)==FLAG_RESET);
 8000afa:	bf00      	nop
 8000afc:	2102      	movs	r1, #2
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ffe0 	bl	8000ac4 <SPI_GetFlagStatus>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f8      	beq.n	8000afc <SPI_SendData+0x10>

		//Check the DFF bit
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00e      	beq.n	8000b34 <SPI_SendData+0x48>
		{
			// Load 16 bit data into the DATA Register
			pSPIx->DR= *((uint16_t*)pTxBuffer);
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60da      	str	r2, [r3, #12]
			//Decrementing the data by two length
			len--;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
			len--;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	e00a      	b.n	8000b4a <SPI_SendData+0x5e>
		}
		else
		{
			//Load the data register with 8 bits of data
			pSPIx->DR= *pTxBuffer;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	60da      	str	r2, [r3, #12]
			//Decrementing the data by one.
			len--;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
	while(len>0)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1d4      	bne.n	8000afa <SPI_SendData+0xe>
		}

	}

}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <SPI_PeripheralControl>:
 * @return type		--return type of the function and how it should be handled
 *
 * @Note 			--any special requirements or instructions that the user needs to follow while using this API
 ***********************************************************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d106      	bne.n	8000b7a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
	}
	else if(EnorDi==DISABLE)
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000b78:	e008      	b.n	8000b8c <SPI_PeripheralControl+0x32>
	else if(EnorDi==DISABLE)
 8000b7a:	78fb      	ldrb	r3, [r7, #3]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d105      	bne.n	8000b8c <SPI_PeripheralControl+0x32>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <__libc_init_array>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	4d0d      	ldr	r5, [pc, #52]	; (8000bd0 <__libc_init_array+0x38>)
 8000b9c:	4c0d      	ldr	r4, [pc, #52]	; (8000bd4 <__libc_init_array+0x3c>)
 8000b9e:	1b64      	subs	r4, r4, r5
 8000ba0:	10a4      	asrs	r4, r4, #2
 8000ba2:	2600      	movs	r6, #0
 8000ba4:	42a6      	cmp	r6, r4
 8000ba6:	d109      	bne.n	8000bbc <__libc_init_array+0x24>
 8000ba8:	4d0b      	ldr	r5, [pc, #44]	; (8000bd8 <__libc_init_array+0x40>)
 8000baa:	4c0c      	ldr	r4, [pc, #48]	; (8000bdc <__libc_init_array+0x44>)
 8000bac:	f000 f818 	bl	8000be0 <_init>
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	10a4      	asrs	r4, r4, #2
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	42a6      	cmp	r6, r4
 8000bb8:	d105      	bne.n	8000bc6 <__libc_init_array+0x2e>
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc0:	4798      	blx	r3
 8000bc2:	3601      	adds	r6, #1
 8000bc4:	e7ee      	b.n	8000ba4 <__libc_init_array+0xc>
 8000bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bca:	4798      	blx	r3
 8000bcc:	3601      	adds	r6, #1
 8000bce:	e7f2      	b.n	8000bb6 <__libc_init_array+0x1e>
 8000bd0:	08000c04 	.word	0x08000c04
 8000bd4:	08000c04 	.word	0x08000c04
 8000bd8:	08000c04 	.word	0x08000c04
 8000bdc:	08000c08 	.word	0x08000c08

08000be0 <_init>:
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	bf00      	nop
 8000be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000be6:	bc08      	pop	{r3}
 8000be8:	469e      	mov	lr, r3
 8000bea:	4770      	bx	lr

08000bec <_fini>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr
